[
    {
        "calculus": "∃id ∃name ∃patients_pd (doctors(id, name, patients_pd) ∧ patients_pd < 12)",
        "initial_sql_query_join": null,
        "semantic_list_join": null,
        "result_join": null,
        "initial_sql_query_where": "SELECT *  FROM doctors WHERE doctors.patients_pd < 12;",
        "semantic_list_where": [
            [
                [
                    "ten"
                ],
                [
                    "11"
                ],
                "WHERE doctors.patients_pd < 12;"
            ]
        ],
        "result_where": [
            [
                1,
                "Peter",
                "ten"
            ],
            [
                2,
                "Giovanni",
                "11"
            ]
        ],
        "output": [
            [
                1,
                "Peter",
                "ten"
            ],
            [
                2,
                "Giovanni",
                "11"
            ]
        ]
    },
    {
        "calculus": "∃id ∃patients_pd (doctors(id, 'Peter', patients_pd) ∧ patients_pd < 12)",
        "initial_sql_query_join": null,
        "semantic_list_join": null,
        "result_join": null,
        "initial_sql_query_where": "SELECT * FROM doctors WHERE doctors.name = 'Peter' AND doctors.patients_pd < 12;",
        "semantic_list_where": [
            [
                [
                    "Peter"
                ],
                "WHERE doctors.name = 'Peter' AND doctors.patients_pd < 12;"
            ],
            [
                [
                    "ten"
                ],
                [
                    "11"
                ],
                "WHERE doctors.name = 'Peter' AND doctors.patients_pd < 12;"
            ]
        ],
        "result_where": [
            [
                1,
                "Peter",
                "ten"
            ]
        ],
        "output": [
            [
                1,
                "Peter",
                "ten"
            ]
        ]
    },
    {
        "calculus": "∃x ∃y ∃z (children_table(x, y) ∧ fathers(x, z))",
        "initial_sql_query_join": "SELECT *  FROM children_table INNER JOIN fathers ON fathers.id = CASE children_table.id             WHEN 0 THEN 'zero'             WHEN 1 THEN 'one'             WHEN 2 THEN 'two'             END;",
        "semantic_list_join": [
            {
                "0": [
                    "zero"
                ],
                "1": [
                    "one"
                ],
                "2": [
                    "two"
                ],
                "3": []
            }
        ],
        "result_join": [
            [
                0,
                "4",
                "zero",
                "Gerhard"
            ],
            [
                1,
                "1",
                "one",
                "Joachim"
            ],
            [
                2,
                "many",
                "two",
                "Dieter"
            ]
        ],
        "initial_sql_query_where": null,
        "semantic_list_where": null,
        "result_where": null,
        "output": [
            [
                0,
                "4",
                "zero",
                "Gerhard"
            ],
            [
                1,
                "1",
                "one",
                "Joachim"
            ],
            [
                2,
                "many",
                "two",
                "Dieter"
            ]
        ]
    },
    {
        "calculus": "∃id (children_table(id, ) ∧ fathers(id, _) ∧ mothers(id, _) )",
        "initial_sql_query_join": "SELECT *  FROM children_table INNER JOIN fathers ON children_table.id = CASE fathers.id                                              WHEN 'zero' THEN 0                                              WHEN 'one' THEN 1                                              WHEN 'two' THEN 2                                              ELSE NULL  -- Add NULL in else clause                                         END INNER JOIN mothers ON children_table.id = mothers.id;",
        "semantic_list_join": [
            {
                "0": [
                    "zero"
                ],
                "1": [
                    "one"
                ],
                "2": [
                    "two"
                ],
                "3": []
            },
            {}
        ],
        "result_join": [
            [
                1,
                "1",
                "one",
                "Joachim",
                1,
                "Julia"
            ],
            [
                2,
                "many",
                "two",
                "Dieter",
                2,
                "Petra"
            ]
        ],
        "initial_sql_query_where": null,
        "semantic_list_where": null,
        "result_where": null,
        "output": [
            [
                1,
                "1",
                "one",
                "Joachim",
                1,
                "Julia"
            ],
            [
                2,
                "many",
                "two",
                "Dieter",
                2,
                "Petra"
            ]
        ]
    },
    {
        "calculus": "∃id (tennis_players(id, _, 'January') ∧ tournaments(id, name, price_money))",
        "initial_sql_query_join": "SELECT * FROM tennis_players INNER JOIN tournaments ON tennis_players.id = tournaments.winner_id WHERE tennis_players.born = 'January';",
        "semantic_list_join": [
            {}
        ],
        "result_join": "SELECT * FROM tennis_players INNER JOIN tournaments ON tennis_players.id = tournaments.winner_id WHERE tennis_players.born = 'January';",
        "initial_sql_query_where": "SELECT * FROM tennis_players INNER JOIN tournaments ON tennis_players.id = tournaments.winner_id WHERE tennis_players.born = 'January';",
        "semantic_list_where": [
            [
                [
                    "January 1986"
                ],
                [
                    "18.01.1997"
                ],
                "WHERE tennis_players.born = 'January';"
            ]
        ],
        "result_where": [
            [
                4,
                "Michael",
                "18.01.1997",
                4,
                "Berlin Open",
                4.0
            ],
            [
                3,
                "Xi",
                "January 1986",
                3,
                "Warsaw Open",
                3.0
            ],
            [
                3,
                "Xi",
                "January 1986",
                3,
                "Osaka Open",
                0.5
            ]
        ],
        "output": [
            [
                4,
                "Michael",
                "18.01.1997",
                4,
                "Berlin Open",
                4.0
            ],
            [
                3,
                "Xi",
                "January 1986",
                3,
                "Warsaw Open",
                3.0
            ],
            [
                3,
                "Xi",
                "January 1986",
                3,
                "Osaka Open",
                0.5
            ]
        ]
    },
    {
        "calculus": "∃m ∃f ∃i (influencers(m, f) ∧ f > 500 ∧ followers(i, m, z))",
        "initial_sql_query_join": "SELECT * FROM influencers INNER JOIN followers ON influencers.media_name = followers.following WHERE influencers.clicks > 500;",
        "semantic_list_join": [
            {
                "makeuptutorial": [
                    "makeuptutorial"
                ],
                "outsideguy": [],
                "surviver1000": [
                    "surviver1000",
                    "surviver1000"
                ],
                "princess": [
                    "princess"
                ]
            }
        ],
        "result_join": "SELECT *\nFROM influencers\nINNER JOIN followers ON influencers.media_name = CASE followers.following\n    WHEN 'makeuptutorial' THEN 'makeuptutorial'\n    WHEN 'surviver1000' THEN 'surviver1000'\n    WHEN 'princess' THEN 'princess'\n    END\nWHERE influencers.clicks > 500;",
        "initial_sql_query_where": "SELECT * FROM influencers INNER JOIN followers ON influencers.media_name = followers.following WHERE influencers.clicks > 500;",
        "semantic_list_where": [
            [
                [
                    "1000 thousand"
                ],
                [
                    "1 million"
                ],
                [
                    "one thousand"
                ],
                "WHERE influencers.clicks > 500;"
            ]
        ],
        "result_where": [
            [
                "surviver1000",
                "1 million",
                1,
                "surviver1000",
                true
            ],
            [
                "makeuptutorial",
                "1000 thousand",
                3,
                "makeuptutorial",
                false
            ],
            [
                "surviver1000",
                "1 million",
                2,
                "surviver1000",
                true
            ],
            [
                "princess",
                "one thousand",
                3,
                "princess",
                true
            ]
        ],
        "output": [
            [
                "surviver1000",
                "1 million",
                1,
                "surviver1000",
                true
            ],
            [
                "makeuptutorial",
                "1000 thousand",
                3,
                "makeuptutorial",
                false
            ],
            [
                "surviver1000",
                "1 million",
                2,
                "surviver1000",
                true
            ],
            [
                "princess",
                "one thousand",
                3,
                "princess",
                true
            ]
        ]
    },
    {
        "calculus": "∃id (children_table(id, >1) ∧ fathers(id, _))",
        "initial_sql_query_join": "SELECT * FROM children_table INNER JOIN fathers ON children_table.id = fathers.id WHERE children_table.children > 1;",
        "semantic_list_join": [
            {
                "0": [
                    "zero"
                ],
                "1": [
                    "one"
                ],
                "2": [
                    "two"
                ],
                "3": []
            }
        ],
        "result_join": "SELECT *\nFROM children_table\nINNER JOIN fathers ON fathers.id = CASE children_table.id\n    WHEN 0 THEN 'zero'\n    WHEN 1 THEN 'one'\n    WHEN 2 THEN 'two'\n    END\nWHERE children_table.children > 1;",
        "initial_sql_query_where": "SELECT * FROM children_table INNER JOIN fathers ON fathers.id = CASE children_table.id     WHEN 0 THEN 'zero'     WHEN 1 THEN 'one'     WHEN 2 THEN 'two'     END WHERE children_table.children > 1;",
        "semantic_list_where": [
            [
                [
                    "4"
                ],
                [
                    "many"
                ],
                [
                    "2"
                ],
                "WHERE children_table.children > 1;"
            ]
        ],
        "result_where": [
            [
                0,
                "4",
                "zero",
                "Gerhard"
            ],
            [
                2,
                "many",
                "two",
                "Dieter"
            ]
        ],
        "output": [
            [
                0,
                "4",
                "zero",
                "Gerhard"
            ],
            [
                2,
                "many",
                "two",
                "Dieter"
            ]
        ]
    },
    {
        "calculus": "∃d weather(d, city, temperature, rainfall) ∧ website_visits(d, page, visits)",
        "initial_sql_query_join": "SELECT *  FROM weather INNER JOIN website_visits ON website_visits.date = CASE weather.date WHEN '2023 10 26' THEN '2023 October 26' WHEN '2023 10 27' THEN '2023 October 27' END;",
        "semantic_list_join": [
            {
                "2023 10 26": [
                    "2023 October 26",
                    "2023 October 26"
                ],
                "2023 10 27": [
                    "2023 October 27",
                    "2023 October 27"
                ]
            }
        ],
        "result_join": [
            [
                "2023 10 26",
                "London",
                12,
                0,
                "2023 October 26",
                "about",
                500
            ],
            [
                "2023 10 26",
                "London",
                12,
                0,
                "2023 October 26",
                "homepage",
                1000
            ],
            [
                "2023 10 26",
                "New York",
                15,
                2,
                "2023 October 26",
                "about",
                500
            ],
            [
                "2023 10 26",
                "New York",
                15,
                2,
                "2023 October 26",
                "homepage",
                1000
            ],
            [
                "2023 10 27",
                "London",
                10,
                5,
                "2023 October 27",
                "contact",
                200
            ],
            [
                "2023 10 27",
                "London",
                10,
                5,
                "2023 October 27",
                "homepage",
                1200
            ],
            [
                "2023 10 27",
                "New York",
                13,
                1,
                "2023 October 27",
                "contact",
                200
            ],
            [
                "2023 10 27",
                "New York",
                13,
                1,
                "2023 October 27",
                "homepage",
                1200
            ]
        ],
        "initial_sql_query_where": null,
        "semantic_list_where": null,
        "result_where": null,
        "output": [
            [
                "2023 10 26",
                "London",
                12,
                0,
                "2023 October 26",
                "about",
                500
            ],
            [
                "2023 10 26",
                "London",
                12,
                0,
                "2023 October 26",
                "homepage",
                1000
            ],
            [
                "2023 10 26",
                "New York",
                15,
                2,
                "2023 October 26",
                "about",
                500
            ],
            [
                "2023 10 26",
                "New York",
                15,
                2,
                "2023 October 26",
                "homepage",
                1000
            ],
            [
                "2023 10 27",
                "London",
                10,
                5,
                "2023 October 27",
                "contact",
                200
            ],
            [
                "2023 10 27",
                "London",
                10,
                5,
                "2023 October 27",
                "homepage",
                1200
            ],
            [
                "2023 10 27",
                "New York",
                13,
                1,
                "2023 October 27",
                "contact",
                200
            ],
            [
                "2023 10 27",
                "New York",
                13,
                1,
                "2023 October 27",
                "homepage",
                1200
            ]
        ]
    },
    {
        "calculus": "ARTISTS(a,,), ALBUMS(,a,\"Reputation\",2017),SONGS(,a2,song_name,),ALBUMS(a2,a,)",
        "initial_sql_query_join": "SELECT * FROM ALBUMS INNER JOIN ARTISTS ON ALBUMS.artist_id = ARTISTS.id INNER JOIN SONGS ON ALBUMS.id = SONGS.album_id;",
        "semantic_list_join": [
            {},
            {}
        ],
        "result_join": [
            [
                1,
                1,
                "Reputation",
                "2017",
                1,
                "Taylor Swift",
                "English",
                1,
                1,
                "Delicate",
                "3:52"
            ],
            [
                2,
                2,
                "Reputation",
                "2017",
                2,
                "Reputation Artist",
                "English",
                2,
                2,
                "New Year’s Day",
                "3:55"
            ]
        ],
        "initial_sql_query_where": null,
        "semantic_list_where": null,
        "result_where": null,
        "output": [
            [
                1,
                1,
                "Reputation",
                "2017",
                1,
                "Taylor Swift",
                "English",
                1,
                1,
                "Delicate",
                "3:52"
            ],
            [
                2,
                2,
                "Reputation",
                "2017",
                2,
                "Reputation Artist",
                "English",
                2,
                2,
                "New Year’s Day",
                "3:55"
            ]
        ]
    },
    {
        "calculus": "∃id ∃shares ∃name (shareowner1row(id, name, shares) ∧ animalowner1row(id, _, 'dog'))",
        "initial_sql_query_join": "SELECT * FROM shareowner1row INNER JOIN animalowner1row ON shareowner1row.id = animalowner1row.owner_id WHERE animalowner1row.category = 'dog';",
        "semantic_list_join": [
            {}
        ],
        "result_join": "SELECT * FROM shareowner1row INNER JOIN animalowner1row ON shareowner1row.id = animalowner1row.owner_id WHERE animalowner1row.category = 'dog';",
        "initial_sql_query_where": "SELECT * FROM shareowner1row INNER JOIN animalowner1row ON shareowner1row.id = animalowner1row.owner_id WHERE animalowner1row.category = 'dog';",
        "semantic_list_where": [
            [
                [
                    "chien"
                ],
                "WHERE animalowner1row.category = 'dog';"
            ]
        ],
        "result_where": [
            [
                1,
                "Pierre",
                20,
                1,
                "bill",
                "chien"
            ]
        ],
        "output": [
            [
                1,
                "Pierre",
                20,
                1,
                "bill",
                "chien"
            ]
        ]
    },
    {
        "calculus": "∃id ∃shares ∃name (shareowner(id, name, shares) ∧ animalowner(id, _, 'dog'))",
        "initial_sql_query_join": "SELECT * FROM shareowner INNER JOIN animalowner ON shareowner.id = animalowner.owner_id WHERE animalowner.category = 'dog';",
        "semantic_list_join": [
            {}
        ],
        "result_join": "SELECT * FROM shareowner INNER JOIN animalowner ON shareowner.id = animalowner.owner_id WHERE animalowner.category = 'dog';",
        "initial_sql_query_where": "SELECT * FROM shareowner INNER JOIN animalowner ON shareowner.id = animalowner.owner_id WHERE animalowner.category = 'dog';",
        "semantic_list_where": [
            [
                [
                    "chien"
                ],
                [
                    "dog"
                ],
                [
                    "perro"
                ],
                "WHERE animalowner.category = 'dog';"
            ]
        ],
        "result_where": [
            [
                3,
                "Diego",
                15,
                3,
                "chris",
                "dog"
            ],
            [
                4,
                "Marcel",
                11,
                4,
                "juan",
                "perro"
            ],
            [
                1,
                "Pierre",
                20,
                1,
                "bill",
                "chien"
            ]
        ],
        "output": [
            [
                3,
                "Diego",
                15,
                3,
                "chris",
                "dog"
            ],
            [
                4,
                "Marcel",
                11,
                4,
                "juan",
                "perro"
            ],
            [
                1,
                "Pierre",
                20,
                1,
                "bill",
                "chien"
            ]
        ]
    },
    {
        "calculus": "∃id ∃shares ∃name(shareowner(id, name, shares) ∧ ¬animalowner(id, _, 'dog'))",
        "initial_sql_query_join": "SELECT * FROM shareowner INNER JOIN animalowner ON shareowner.id = animalowner.owner_id WHERE animalowner.category <> 'dog';",
        "semantic_list_join": [
            {}
        ],
        "result_join": "SELECT * FROM shareowner INNER JOIN animalowner ON shareowner.id = animalowner.owner_id WHERE animalowner.category <> 'dog';",
        "initial_sql_query_where": "SELECT * FROM shareowner INNER JOIN animalowner ON shareowner.id = animalowner.owner_id WHERE animalowner.category <> 'dog';",
        "semantic_list_where": [
            [
                [
                    "chat"
                ],
                "WHERE animalowner.category <> 'dog';"
            ]
        ],
        "result_where": [
            [
                2,
                "Vladi",
                10,
                2,
                "diego",
                "chat"
            ]
        ],
        "output": [
            [
                2,
                "Vladi",
                10,
                2,
                "diego",
                "chat"
            ]
        ]
    },
    {
        "calculus": "∃item bakery_sales(item, _, _) ∧ oven_temperature(d, >200 °C)",
        "initial_sql_query_join": "SELECT * FROM bakery_sales INNER JOIN oven_temperature ON bakery_sales.item = oven_temperature.item WHERE oven_temperature.temperature > '200 °C';",
        "semantic_list_join": [
            {
                "Croissants": [
                    "Croissants"
                ],
                "Baguettes": [
                    "Baguettes"
                ],
                "Macarons": [
                    "Macarons"
                ],
                "Pain au Chocolat": [
                    "Pain au Chocolat"
                ]
            }
        ],
        "result_join": "SELECT *\nFROM bakery_sales\nINNER JOIN oven_temperature ON bakery_sales.item = CASE oven_temperature.item\n            WHEN 'Croissants' THEN 'Croissants'\n            WHEN 'Baguettes' THEN 'Baguettes'\n            WHEN 'Macarons' THEN 'Macarons'\n            WHEN 'Pain au Chocolat' THEN 'Pain au Chocolat'\n            END\nWHERE oven_temperature.temperature > '200 °C';",
        "initial_sql_query_where": "SELECT * FROM bakery_sales INNER JOIN oven_temperature ON bakery_sales.item = CASE oven_temperature.item             WHEN 'Croissants' THEN 'Croissants'             WHEN 'Baguettes' THEN 'Baguettes'             WHEN 'Macarons' THEN 'Macarons'             WHEN 'Pain au Chocolat' THEN 'Pain au Chocolat'             END WHERE oven_temperature.temperature > '200 °C';",
        "semantic_list_where": [
            [
                [
                    "400 °F"
                ],
                "WHERE oven_temperature.temperature > '200 °C';"
            ]
        ],
        "result_where": [
            [
                "Baguettes",
                "8 dozen",
                "10.00 per dozen",
                "Baguettes",
                "400 °F"
            ]
        ],
        "output": [
            [
                "Baguettes",
                "8 dozen",
                "10.00 per dozen",
                "Baguettes",
                "400 °F"
            ]
        ]
    }
]